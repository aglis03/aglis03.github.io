---
title: "Grey Code Corporation"
author: "QMBE 3740: Data Mining"
date: "Module: Classification Application"
output: pdf_document
---

```{r setup, include=FALSE}
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
```

Grey Code Corporation (GCC) is a media and marketing company involved in magazine and book publishing and in television broadcasting. 
GCC’s portfolio of home and family magazines has been a long-running strength, but it has expanded to become a provider of a spectrum of services (market research, communications planning, web site advertising, etc.) that can enhance its clients’ brands.

GCC’s relational database contains over a terabyte of data encompassing 75 million customers. 
GCC uses the data in its database to develop campaigns for new customer acquisition, customer reactivation, and identification of cross-selling opportunities for products. 
For example, GCC will generate separate versions of a monthly issue of a magazine that will differ only by the advertisements they contain. 
It will mail a subscribing customer the version with the print ads identified by its database as being of most interest to that customer.

One particular problem facing GCC is how to boost the customer response rate to renewal offers that it mails to its magazine subscribers. 
The **industry response rate is about 2%**, but GCC has historically performed better than that. 
However, GCC must update its model to correspond to recent changes. 
GCC’s director of database marketing, Chris Grey, wants to make sure that GCC maintains its place as one of the top achievers in targeted marketing. 
The file `Grey.csv` contains 38 features (columns) and over 40,000 rows (distinct customers). 
The table appended to the end of this case provides a list of the variables and their descriptions

## TASKS

Construct a classification model to identify customers who are likely to respond to a maililng (`Renewal`) and document the following:

1. Explore the data, making sure to filter out unnecessary and redundant variables.
2. Experiment with various classification methods and propose a final model for identifying customers who will respond to the targeted marketing using proper evaluation methods, proper use of accuracy measures and visualizations with ROC curves and a Lift chart.
3. Include a recommendation for how to apply the results of your proposed model and how its use will affect GCC's efforts at effective marketing - i.e., precision, sensitivity, and a lift chart. For example, if GCC sends the targeted marketing to the top 10\% of the test set that the model believes is most likely to renew, what is the expected response rate? How does that compare to the industry's average response rate?
4. Finally use XAI techniques to demonstrate the global behavior of your recommended model making sure to identify the most important features in your model and analyze their behavior using partial dependency plots.
5. Use XAI techinques to analyze and explain your model's predictions for customers with ID numbers 12113, 9270, 12421. Make sure to identify and visualize the most important features for our model's prediction on these specific customers, then analyze and visualize the behavior of those most important features for these customers. (You'll use SHAP and Ceteris Paribus plots)

With 38 features, we should inspect and explore to make sure we don't have unnecessary or redundant features that we can remove from the training. For example, the magazine does home and family type magazines and may be of interest to home owners. Several features measure aspects of home membership, possibly with redundance. The features `HomeOwner`, `DwellingType`,and `HomeValue` all touch upon the issue of living space and homeownership. For example, it may be the case that you can't have a positive `HomeValue` if you do not own your home.  Family structure is also repeatedly covered. `ChildPresent` is an indicator of children, and the three features `ChildX-X` are likelihoods of kids of a certain age in the home.
Features like `Income` and `HomeValue` both touch upon a customer's general affluence. Both could say different things, but perhaps not.

Several features touch upon customer behaviors. Some of these features may be calculated from others, like `DollarsPerIssue`.

```{r message=FALSE}
library(caret)
library(gbm)
library(DALEX)
library(pROC)
library(AppliedPredictiveModeling)
library(tidyverse)
```

```{r message=FALSE}
# Read in data, recode variable types, and
# change target to dummy var.
grey = read_csv("Grey.csv") %>%
  mutate_at(vars(DwellingType, Gender, Marital, ChildPresent,
                 Occupation, HomeValue, MagazineStatus, LastPaymentType,
                 GiftDonor), .funs = factor) %>%
  mutate(Renewal = factor(ifelse(Renewal=="Yes", 1, 0)))
```

```{r}
grey %>%
  select(-CustomerID) %>%
  keep(is.numeric) %>%
  cor() %>%
  corrplot::corrplot(tl.cex = 0.6)
```

Using the strong correlations above, we begin to see some possibly redundant numerical features.
First, `TotalPaidOrders` and `TotalAmountPaid` are closely related but are at least different measures if the amount paid per order isn't always the same. But if average amount per order is all that matters, then we might omit one. Second, `MonthsSinceLastPayment` and `YearsSinceLastOrder`. One is measured in years, the other months and assuming that last payments coincide most of the time with last order, these two essentially measure the same thing. Not surprisingly, `MonthsSinceLastOrder` is closely correlated with `YearsSinceLastOrder`. Also `MonthsSinceLastOrder` and `MonthsSinceLastPayment`, and also `MonthsSinceExpire` and `MonthsSinceLastOrder`.
Another is `ExpiredSubscriptions` and `PaidCashMagazines`, but those may be truly different measures.
`RequestedCancellations` and `UnpaidMagazines` are strongly similar, and make since that customers may have unpaid accounts for subscriptions they're trying to cancel.

```{r}
# Lets remove these redundant features
grey = grey %>%
  select(-TotalPaidOrders, -YearsSinceLastOrder, -MonthsSinceLastPayment,
         -MonthsSinceExpire, -UnpaidMagazines, -ChildPresent, -MonthsSince1stOrder)
```

```{r}
summary(grey)
```



```{r}
transparentTheme(trans = .4)
featurePlot(x = select(grey, MonthsSinceLastOrder, Income, NumberGiftDonations, TotalAmountPaid), 
            y = grey$Renewal, 
            plot = "pairs",
            ## Add a key at the top
            auto.key = list(columns = 2))
```

```{r}
# Partition the data.
set.seed(596)
samp = createDataPartition(grey$Renewal,
                           p = 0.7,
                           list = FALSE)
train = grey[samp, ]
test = grey[-samp, ]
rm(samp)
```

```{r}
# Check for class imbalance problems. 
train %>%
  select(Renewal) %>% 
  table() %>% prop.table()
```

```{r}
# Address the class imbalance problems.
library(performanceEstimation)
set.seed(4032)
train.bal = smote(Renewal ~ .,
                  data = train,
                  perc.over = 2,
                  perc.under = 1.5)

# After using SMOTE to balance training
# data, lets inspect the new counts.
train.bal %>%
  select(Renewal) %>%
  table() 
```

```{r warning=FALSE}
# Train a random forest model
# set.seed(986)
# rf_model = train(
#   y = train.bal$Renewal,
#   x = select(train.bal, -CustomerID, -Renewal),
#   method = "rf",
#   trControl = trainControl(method = "boot", number = 30),
#   tuneLength = 10
# )
# saveRDS(rf_model, "GCC_rf_model.rds")
rf_model = readRDS("GCC_rf_model.rds")
plot(rf_model)
```

```{r warning=FALSE}
# Train a gradient boost model
# set.seed(986)
# gbm_model = train(
#   y = train.bal$Renewal,
#   x = select(train.bal, -CustomerID, -Renewal),
#   method = "gbm",
#   verbose = FALSE,
#   trControl = trainControl(method = "boot", number = 5),
#   tuneLength = 10
# )
# saveRDS(gbm_model, "GCC_gbm_model.rds")
gbm_model = readRDS("GCC_gbm_model.rds")
plot(gbm_model)
```


```{r}
rf_explain = DALEX::explain(model = rf_model,
                            data = test,
                            y = test$Renewal=="1",
                            type = "classification",
                            label = "Random Forest")

gbm_explain = DALEX::explain(model = gbm_model,
                             data = test,
                             y = test$Renewal=="1",
                             type = "classification",
                             label = "GradientBoost")
```

```{r}
rf_perf = DALEX::model_performance(rf_explain, cutoff = 0.5)
rf_perf
```

```{r}
gbm_perf = DALEX::model_performance(gbm_explain, cutoff = 0.5)
gbm_perf
```


```{r}
library(patchwork)
p1 = plot(rf_perf, gbm_perf, geom = "roc")
p2 = plot(rf_perf, gbm_perf, geom = "prc")
p1 + p2
```

```{r}
plot(rf_perf, gbm_perf, geom = "lift")
```


```{r}
rf_mp = DALEX::model_parts(rf_explain,
                           B = 50)

gbm_mp = DALEX::model_parts(gbm_explain,
                            B = 50)
plot(rf_mp, gbm_mp, max_vars = 8)
```

```{r}
rf_pp = DALEX::model_profile(rf_explain,
                             variables = c("DollarsPerIssue", "Child6.12",
                                           "MonthsSinceLastOrder", "TotalAmountPaid"),
                             N = 100)
gbm_pp = DALEX::model_profile(gbm_explain,
                             variables = c("DollarsPerIssue", "Child6.12",
                                           "MonthsSinceLastOrder", "TotalAmountPaid"),
                             N = 100)

plot(rf_pp, geom="profiles")
```

```{r}
plot(gbm_pp, geom="profiles")
```

```{r}
plot(rf_pp, gbm_pp)
```

```{r}
# 12113, 9270, 12421
gbm_shap_6302 = DALEX::predict_parts_shap(gbm_explain, grey[grey$CustomerID==6302,], B=25)
gbm_shap_22233 = DALEX::predict_parts_shap(gbm_explain, grey[grey$CustomerID==22233,], B=25)
gbm_shap_11786 = DALEX::predict_parts_shap(gbm_explain, grey[grey$CustomerID==12421,], B=25)
```

```{r}
prob_6302 = predict(gbm_model, newdata = grey[grey$CustomerID==6302,], type="prob")[,2]
prob_22233 = predict(gbm_model, newdata = grey[grey$CustomerID==22233,], type="prob")[,2]
prob_11786 = predict(gbm_model, newdata = grey[grey$CustomerID==11786,], type="prob")[,2]
```



```{r}
plot(gbm_shap_6302) + 
  ggtitle(paste("SHAP for Customer 6302: Prob =", round(prob_6302,3)))
```

```{r}
plot(gbm_shap_22233) + 
  ggtitle(paste("SHAP for Customer 22233: Prob =", round(prob_22233,3)))
```

```{r}
plot(gbm_shap_11786) + 
  ggtitle(paste("SHAP for Customer 11786: Prob =", round(prob_11786,3)))
```


